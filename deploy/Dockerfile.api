# Multi-stage build for API
FROM node:20-alpine AS base

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-workspace.yaml ./
COPY services/api/package.json ./services/api/
COPY packages/shared/package.json ./packages/shared/
COPY prisma/schema.prisma ./prisma/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY packages/shared ./packages/shared
COPY services/api ./services/api
COPY prisma ./prisma

# Build shared package
RUN pnpm --filter packages/shared build

# Build API
RUN pnpm --filter services/api build

# Production stage
FROM node:20-alpine AS production

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-workspace.yaml ./
COPY services/api/package.json ./services/api/
COPY packages/shared/package.json ./packages/shared/
COPY prisma/schema.prisma ./prisma/

# Install production dependencies only
RUN pnpm install --frozen-lockfile --prod

# Copy built application
COPY --from=base /app/packages/shared/dist ./packages/shared/dist
COPY --from=base /app/services/api/dist ./services/api/dist
COPY --from=base /app/prisma ./prisma

# Generate Prisma client
RUN pnpm exec prisma generate --schema prisma/schema.prisma

# Expose port
EXPOSE 4000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:4000/health || exit 1

# Start API
CMD ["node", "services/api/dist/index.js"]
